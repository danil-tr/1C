{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "161b7420",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2021-09-14T20:29:41.857186Z",
     "start_time": "2021-09-14T20:29:41.850648Z"
    }
   },
   "source": [
    "# Problem Set 1"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b0e0bf55",
   "metadata": {},
   "source": [
    "$№ 8.16$  \n",
    "$z = f(x, y) \\hspace{0.25 cm}$  $ \\Delta_x = 10^{-3}$  \n",
    "a) $z = x + 10y$  \n",
    "Пусть $z^{\\prime}$, $x^{\\prime}$ - точное значение z и x соответственно.  \n",
    "Тогда найдем абсолютную ошибку вычисления :  \n",
    "$ |z^{\\prime} - z| = | x^{\\prime} + 10y^{\\prime} - x - 10y| = |x^{\\prime} - x\n",
    "+ 10(y^{\\prime} - y)| \\leq \\Delta_x + 10\\Delta_y$.  \n",
    "Если $\\Delta_z \\approx \\Delta_x = 10^{-3}$, то $\\Delta_y = \\dfrac{10^{-3}}{10} = 10^{-4}$\n",
    "\n",
    "б) $ z = xy + xy^2$  \n",
    "Аналогично предыдущему пункту: \n",
    "$|z^{\\prime} - z| = |x^{\\prime}y^{\\prime} + x^{\\prime}{y^{\\prime}}^2 - \n",
    "xy - xy^2| = |(x + \\Delta_x)(y + \\Delta_y) + (x + \\Delta_x)(x + \\Delta_y)^2) -xy - xy^2|$  \n",
    "Пренебрегаем порядками малости выше второго.  \n",
    "Тогда $|z^{\\prime} - z| = | (y^2 + y)\\Delta_x + (2xy + x)\\Delta_y| \n",
    "\\leq |(y^2 + y)|\\Delta_x + |(2xy + x)|\\Delta_y$  \n",
    "Порядки выражений при погрешностях равны (их отношение равно 1) $\\Rightarrow$ \n",
    "$\\Delta_y = \\dfrac{\\Delta_x}{1} = 10^{-3}$  \n",
    "\n",
    "в) $z = \\dfrac{x}{y}$  \n",
    "Используем другой способ найти абсолютную погрешность.  \n",
    "Распишем погрешность как малое приращение функции двух переменных:  \n",
    "$$\\Delta_z = (f_x)^{\\prime}\\cdot \\Delta_x +  (f_y)^{\\prime}\\cdot \\Delta_y$$ \n",
    "Тогда $|z^{\\prime} - z| \\leq |\\dfrac{1}{y}| \\Delta_x + |\\dfrac{x}{y^2}| \\Delta_y$.\n",
    "Отсюда $\\Delta_y = 10^{-3}$\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c61675d3",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2021-09-14T21:26:35.050397Z",
     "start_time": "2021-09-14T21:26:35.045888Z"
    }
   },
   "source": [
    "$№ 8.20$     \n",
    "a) Используем для оценки погрешности представления функции $y = f(x)$ ряд Тейлора\n",
    "с остаточным членом в форме Лагранжа $\\Rightarrow$ $y \\approx \\sum\\limits_{k=1}^n \\dfrac{{f}^{(k)}(0)}{k!}x^k + \\dfrac{{f}^{(n+1)}(\\xi)}{(n+1)!}x^{n+1}$  \n",
    "Тогда $\\max\\limits_{0 \\leq \\xi \\leq x}$ $ \\left|\\dfrac{{f}^{(n+1)}(\\xi)}{(n+1)!}x^{n+1}\\right| \\leq \\Delta_x = 10^{-3}$  \n",
    "Пусть дан $y = sin(x)$ на интервале $[0,1]$  \n",
    "Тогда из условий: $\\xi \\leq x \\leq 1 $ и ${sin(\\xi)}^{(n+1)} \\leq 1$ получаем $\\dfrac{1}{(n+1)!} \\leq 10^{-3}$  \n",
    "Получаем уравнение $(n+1)! \\leq 1000$"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "a92f9e1f",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2021-09-14T22:23:47.340587Z",
     "start_time": "2021-09-14T22:23:47.329974Z"
    },
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Answer for y = sin(x) 0 < x < 1 is 6\n"
     ]
    }
   ],
   "source": [
    "from math import factorial\n",
    "i = 0\n",
    "\n",
    "while True:\n",
    "    if (factorial(i + 1) > 1000):\n",
    "        break\n",
    "    else:\n",
    "        i += 1\n",
    "        \n",
    "print(\"Answer for y = sin(x) 0 < x < 1 is {}\".format(i))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6546e45c",
   "metadata": {},
   "source": [
    "б) Для второго пункта аналогично $\\xi \\leq 11$, и ${sin(\\xi)}^{(n+1)} \\leq 1 $. \n",
    "Тогда получаем уравнение $\\dfrac{11^{n+1}}{(n+1)!} \\leq 10^{-3}$"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "8e89024b",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2021-09-14T22:38:37.836180Z",
     "start_time": "2021-09-14T22:38:37.830157Z"
    },
    "scrolled": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Answer for y = sin(x) 10 < x < 11 is 33\n"
     ]
    }
   ],
   "source": [
    "i = 0\n",
    "\n",
    "while True:\n",
    "    if ((11**(i+1))/factorial(i + 1) <= 1e-3):\n",
    "        break\n",
    "    else:\n",
    "        i += 1\n",
    "        \n",
    "print(\"Answer for y = sin(x) 10 < x < 11 is {}\".format(i))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d0754634",
   "metadata": {},
   "source": [
    "б) Пусть $\\epsilon$ - абсолютная погрешность при вычислении одного слагаемого $\\dfrac{{f}^{(k)}(0)}{k!}x^k$  \n",
    "Тогда $\\left|\\dfrac{{f}^{(k)}(0)}{k!}x^k  - \\dfrac{{f}^{(k)}(0)}{k!}x^k \n",
    "\\cdot {\\epsilon}^k \\right| \\leq \\Delta_x = 10^{-3} $  \n",
    "Получаем ограничение (учитывая, что $sin(x) \\leq 1$ и $cos(x) \\leq 1$  \n",
    "$$ \\dfrac{x^k(1 - (1+\\epsilon)^k)}{k!} \\leq 10^{-3}$$  \n",
    "Отсюда находим условия:\n",
    "При $x \\in [0, 1]$ $x^k \\leq 1$ $\\Rightarrow$ $(1+\\epsilon)^k + \\dfrac{k!}{1000} \\geq 1$  \n",
    "ри $x \\in [10, 11]$ $\\Rightarrow$ $(1+\\epsilon)^k + \\dfrac{k!}{1000\\cdot 11^k} \\geq 1$"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e8ce3d0e",
   "metadata": {},
   "source": [
    "$№ 8.23$  \n",
    "Определим погрешность в определении корней уравнения \n",
    "$ay^3 + by^2 + d = 0$  \n",
    "a = 1, b = 2, d = -3, $\\Delta_a = \\Delta_b = \\Delta_d = 10^{-2}$  \n",
    "Количество корней уравнения: $y^3 + 2y^2 - 3 = 0$ равно одному, что видно из графика. \n",
    "Проверкой убеждаемся, что $y_0 = 1$ - корень уравнения."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "a303ef3e",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2021-09-14T23:20:11.619954Z",
     "start_time": "2021-09-14T23:20:11.476917Z"
    }
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "x = np.linspace(-3, 2.5, 100)\n",
    "y = x**3 + 2*x**2 - 3\n",
    "fig, ax = plt.subplots()\n",
    "\n",
    "ax.plot(x, y)\n",
    "ax.grid()\n",
    "\n",
    "ax.hlines(0, x.min(), x.max(), color = 'r')\n",
    "\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2201a331",
   "metadata": {},
   "source": [
    "Найдем полный дифференциал $$\\Delta_y = (y^{\\prime}_a)\\cdot \\Delta_a +  (f^{\\prime}_b)\\cdot \\Delta_b + (f^{\\prime}_d)\\cdot \\Delta_d$$ \n",
    "Найдем частные производные из условия, что $f = ay^3 + by^2 + d = 0$  \n",
    "$\\dfrac{df}{da} = \\dfrac{\\partial f}{\\partial y} \\dfrac{\\partial y}{\\partial a} + \n",
    "\\dfrac{\\partial f}{\\partial a} = (3ay^2 + 2by)(y_a)^{\\prime} + y^3 = 0$  \n",
    "Подставим  $y_0$ и получим: $(y^{\\prime}_a) = \\dfrac{1}{7}$. Аналогично получаем \n",
    "$(y^{\\prime}_b) = \\dfrac{1}{7}$ и $(y^{\\prime}_d) = \\dfrac{1}{7}$.  \n",
    "Отсюда $\\Delta_y = \\dfrac{1}{7}( \\Delta_a + \\Delta_b + \\Delta_d) = \\dfrac{3}{7} \\cdot 10^{-3}$"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "cd2e62ad",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2021-09-14T23:59:12.387978Z",
     "start_time": "2021-09-14T23:59:12.384304Z"
    }
   },
   "source": [
    "$№ 7.5$  \n",
    "Пусть $\\lambda$ - произвольное собственное число матрицы $A$, где $\\|A\\|$ - ee норма  \n",
    "Для собственного числа выполнено $Ax = \\lambda x$  \n",
    "Из свойства субмультипликативности матричной нормы(лекция): $|\\lambda|\\cdot \\|x\\|=\\|\\lambda x\\| = \\|Ax\\| \\leq  \\|A\\| \\|x\\| \\Rightarrow |\\lambda|\\cdot \\|x\\| \\leq  \\|A\\| \\|x\\|$  "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f9552d9d",
   "metadata": {},
   "source": [
    "$№ 7.25$\n",
    "По определению: $\\mu(A) = \\|A\\|\\|A^{-1}\\| $  \n",
    "Докажем, что $\\mu(AB) \\leq \\mu(A)\\mu(B)$  \n",
    "$\\mu(AB) = \\|AB\\| \\|(AB)^{-1}\\|  = \\|AB\\| \\|B^{-1}A^{-1}\\| \\leq \\|A\\|\\|A^{-1}\\|\\|B\\|\\|B^{-1}\\| = \\mu(A)\\mu(B)$  \n",
    "Проверим для данных матриц это утверждение:\n",
    "$A$ = $\\begin{pmatrix}\n",
    "      1& 2\\\\\n",
    "      2& 1\\\\\n",
    "    \\end{pmatrix} \\hspace{0.5 cm}$\n",
    "$B$ = $\\begin{pmatrix}\n",
    "      3& 1\\\\\n",
    "      1& 3\\\\\n",
    "    \\end{pmatrix}$\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "9b294d0a",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2021-09-15T01:14:21.722960Z",
     "start_time": "2021-09-15T01:14:21.704471Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "m(XY) = 6.0, m(X) = 3.0, m(Y) = 2.0 - утверждение верно\n"
     ]
    }
   ],
   "source": [
    "from numpy import linalg\n",
    "\n",
    "x = np.array([[1, 2],[2, 1]])\n",
    "y = np.array([[3, 1],[1, 3]])\n",
    "A = x @ y\n",
    "\n",
    "x_inv = np.linalg.inv(x)\n",
    "y_inv = np.linalg.inv(y)\n",
    "A_inv = np.linalg.inv(A)\n",
    "\n",
    "#p=1 норма:\n",
    "m_A = linalg.norm(A, ord = 1) * linalg.norm(A_inv, ord = 1)\n",
    "m_x = linalg.norm(x, ord = 1) * linalg.norm(x_inv, ord = 1)\n",
    "m_y = linalg.norm(y, ord = 1) * linalg.norm(y_inv, ord = 1)\n",
    "\n",
    "print(\"m(XY) = {}, m(X) = {}, m(Y) = {} - утверждение верно\".format(m_A, m_x, m_y))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "e6b5ab67",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
